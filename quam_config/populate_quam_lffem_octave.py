# %%
"""
This script is used to populate the quam generated by running generate_quam.py with initial values based on previous
calibrations or chip manufacturer specs and must be run prior to conducting the first experiment.
It is split according to the component to update (resonator, qubit xy drive, flux line) and allows the user to specify
the different frequencies and power involved. Other parameters are directly related to the control hardware such as
full_scale_power_dbm, band, upsampling_mode...
The last section is dedicated to adding pulses for the single qubit gates and setting the initial values for the
readout and saturation pulses.
"""

########################################################################################################################
# %%                                             Import section
########################################################################################################################
import json
from qualang_tools.units import unit
from quam_config import Quam
from quam_builder.builder.superconducting.pulses import add_DragCosine_pulses, add_default_transmon_pair_pulses
from quam.components import pulses
import numpy as np
from pprint import pprint

########################################################################################################################
# %%                                 QUAM loading and auxiliary functions
########################################################################################################################
# Loads the QUAM
machine = Quam.load()
# Class containing tools to help handling units and conversions.
u = unit(coerce_to_integer=True)



########################################################################################################################
# %%                                    Resonator parameters
########################################################################################################################
# Update frequencies - be aware of coupled ports for bands
# The keyword "band" refers to the following frequency bands:
#   1: (50 MHz - 5.5 GHz)
#   2: (4.5 GHz - 7.5 GHz)
#   3: (6.5 GHz - 10.5 GHz)
# Note that the "coupled" ports O1 & I1, O2 & O3, O4 & O5, O6 & O7, and O8 & I2 must be in the same band.

# Resonator frequencies
rr_freq = np.array([
    10.05, 10.10, 10.15,
]) * u.GHz

rr_LO = np.array([
    10.25, 10.25, 10.25,
]) * u.GHz

rr_if = rr_freq - rr_LO  # The intermediate frequency is inferred from the LO and readout frequencies

assert np.all(np.abs(rr_if) < 400 * u.MHz), (
    "The resonator intermediate frequency must be within [-400; 400] MHz. \n"
    f"Readout frequencies: {rr_freq} \n"
    f"Readout LO frequency: {rr_LO} \n"
    f"Readout IF frequencies: {rr_if} \n"
)

# Update qubit rr freq and power
for k, qubit in enumerate(machine.qubits.values()):
    qubit.resonator.f_01 = rr_freq.tolist()[k]  # Resonator frequency optimized for discriminating 0 (|g>) and 1 (|e>)
    qubit.resonator.RF_frequency = qubit.resonator.f_01  # Readout frequency
    qubit.resonator.frequency_converter_up.LO_frequency = rr_LO.tolist()[k]  # Octave LO frequency [2 : 0.250 : 18] GHz
    qubit.resonator.frequency_converter_up.gain = 0  # Octave gain [-20 : 0.5 : 20] dB
    qubit.resonator.frequency_converter_up.output_mode = "always_on"  # Octave RF switch mode "always_on" or "triggere
    qubit.resonator.opx_output_offset_I = 0.01
    qubit.resonator.opx_output_offset_Q = 0.01
    qubit.resonator.opx_input_offset_I = 0.01
    qubit.resonator.opx_input_offset_Q = 0.01


########################################################################################################################
# %%                                    Qubit parameters
########################################################################################################################
# The keyword "band" refers to the following frequency bands:
#   1: (50 MHz - 5.5 GHz)
#   2: (4.5 GHz - 7.5 GHz)
#   3: (6.5 GHz - 10.5 GHz)
# Note that the "coupled" ports O1 & I1, O2 & O3, O4 & O5, O6 & O7, and O8 & I2 must be in the same band.

# Qubit drive frequencies
xy_freq = np.array([
    8.05, 8.10, 8.15,
]) * u.GHz

xy_LO = np.array([
    8.25, 8.25, 8.25,
]) * u.GHz

xy_if = xy_freq - xy_LO  # The intermediate frequency is inferred from the LO and qubit frequencies
assert np.all(np.abs(xy_if) < 400 * u.MHz), (
    "The xy intermediate frequency must be within [-400; 400] MHz. \n"
    f"Qubit drive frequencies: {xy_freq} \n"
    f"Qubit drive LO frequencies: {xy_LO} \n"
    f"Qubit drive IF frequencies: {xy_if} \n"
)
# Transmon anharmonicity
anharmonicity = np.array([
    250, 250, 250,
]) * u.MHz


# Update qubit xy freq and power
for k, qubit in enumerate(machine.qubits.values()):
    qubit.f_01 = xy_freq.tolist()[k]  # Qubit 0 to 1 (|g> -> |e>) transition frequency
    qubit.xy.RF_frequency = qubit.f_01  # Qubit drive frequency
    qubit.xy.frequency_converter_up.LO_frequency = xy_LO.tolist()[k]  # Octave LO frequency [2 : 0.250 : 18] GHz
    qubit.xy.frequency_converter_up.gain = 0  # Octave gain [-20 : 0.5 : 20] dB
    qubit.xy.frequency_converter_up.output_mode = "always_on"  # Octave RF switch mode "always_on" or "triggered"
    qubit.xy.opx_output_offset_I = 0.01
    qubit.xy.opx_output_offset_Q = 0.01


# Assign shared cores
for k, qubit in enumerate(machine.qubits.values()):
    rr_I = qubit.resonator.opx_output_I
    rr_Q = qubit.resonator.opx_output_Q
    assert rr_I.controller_id == rr_Q.controller_id and rr_I.fem_id == rr_Q.fem_id
    xy_I = qubit.xy.opx_output_I
    xy_Q = qubit.xy.opx_output_Q
    assert xy_I.controller_id == xy_Q.controller_id and xy_I.fem_id == xy_Q.fem_id

    qubit.resonator.core = f"{qubit.name}_{rr_I.controller_id}_slot{rr_I.fem_id}"
    qubit.xy.core = f"{qubit.name}_{xy_I.controller_id}_slot{xy_I.fem_id}"


########################################################################################################################
# %%                                        Plot parameters
########################################################################################################################

# Grid layout (2 columns: column 0 and column 1, from top to bottom)
# Each entry is in the format "column-row" (i.e., "col-row")
#
#   0,3 | 1,3
#   0,2 | 1,2
#   0,1 | 1,1
#   0,0 | 1,0
#
# Represented in row,major order from top row (3) to bottom row (0)

grid_locations = [
    "0,1", "1,1", "0,0",
]
for gd, qubit in zip(grid_locations, machine.qubits.values()):
    qubit.grid_location = gd  # Qubit grid location for plotting as "column,row"



########################################################################################################################
# %%                                        Pulse parameters
########################################################################################################################
# How to add new pulses
# from quam.components.pulses import (
#     SquarePulse,
#     DragGaussianPulse,
#     DragCosinePulse,
#     FlatTopGaussianPulse,
#     WaveformPulse,
#     SquareReadoutPulse,
# )
# e.g., machine.qubits[q].xy.operations["new_pulse"] = FlatTopGaussianPulse(...)

## Update pulses
rr_amplitude = 0.1
xy_amplitude = 0.1

for k, q in enumerate(machine.qubits):
    # readout
    machine.qubits[q].resonator.operations["readout"].length = 1.0 * u.us
    machine.qubits[q].resonator.operations["readout"].amplitude = rr_amplitude
    # Qubit saturation
    machine.qubits[q].xy.operations["saturation"].length = 30 * u.us
    machine.qubits[q].xy.operations["saturation"].amplitude = xy_amplitude
    # Single qubit gates - DragCosine
    add_DragCosine_pulses(
        machine.qubits[q],
        amplitude=xy_amplitude,
        length=40,
        anharmonicity=anharmonicity.tolist()[k],
        alpha=0.0,
        detuning=0,
    )
    # # resonator const
    machine.qubits[q].resonator.operations["const"] = pulses.SquarePulse(
        length=1 * u.us,
        amplitude=xy_amplitude,
        axis_angle=0.0,
    )
    # Qubit const
    machine.qubits[q].xy.operations["const"] = pulses.SquarePulse(
        length=1 * u.us,
        amplitude=xy_amplitude,
        axis_angle=0.0,
    )


########################################################################################################################
# %%                                         Save the updated QUAM
########################################################################################################################
# save into state.json
machine.save()
# Visualize the QUA config and save it
pprint(machine.generate_config())
with open("qua_config.json", "w+") as f:
    json.dump(machine.generate_config(), f, indent=4)

# %%
