"""
This script is used to populate the quam generated by running generate_quam.py with initial values based on previous
calibrations or chip manufacturer specs and must be run prior to conducting the first experiment.
It is split according to the component to update (resonator, qubit xy drive, flux line) and allows the user to specify
the different frequencies and power involved. Other parameters are directly related to the control hardware such as
full_scale_power_dbm, band, upsampling_mode...
The last section is dedicated to adding pulses for the single qubit gates and setting the initial values for the
readout and saturation pulses.
"""

########################################################################################################################
# %%                                             Import section
########################################################################################################################
import json
from qualang_tools.units import unit
from quam_config import Quam
from quam_builder.builder.superconducting.pulses import add_DragCosine_pulses
from quam.components.pulses import GaussianPulse, SquarePulse, SquareReadoutPulse
import numpy as np
from pprint import pprint
import re


########################################################################################################################
# %%                                 QUAM loading and auxiliary functions
########################################################################################################################
# Loads the QUAM
machine = Quam.load("C:/Users/BenjaminSafvati/OneDrive - QM Machines LTD/Documents/GitHub/quam_state")
# Class containing tools to help handling units and conversions.
u = unit(coerce_to_integer=True)


def get_band(freq):
    """Determine the MW fem DAC band corresponding to a given frequency.

    Args:
        freq (float): The frequency in Hz.

    Returns:
        int: The Nyquist band number.
            - 1 if 50 MHz <= freq < 5.5 GHz
            - 2 if 4.5 GHz <= freq < 7.5 GHz
            - 3 if 6.5 GHz <= freq <= 10.5 GHz

    Raises:
        ValueError: If the frequency is outside the MW fem bandwidth [50 MHz, 10.5 GHz].
    """
    if 50e6 <= freq < 5.5e9:
        return 1
    elif 4.5e9 <= freq < 7.5e9:
        return 2
    elif 6.5e9 <= freq <= 10.5e9:
        return 3
    else:
        raise ValueError(f"The specified frequency {freq} Hz is outside of the MW fem bandwidth [50 MHz, 10.5 GHz]")
def build_param_index(ns=None):
    """
    params[pair][controller][code] = {'const_len': ..., 'IF': ..., 'const_amp': ...}
    Matches variable names like:
      parametric_const_len_C1_Q12_1001
      parametric_IF_C4_Q56_1102
      parametric_const_amp_C10_Q1516_1120
    """
    ns = ns or globals()
    params = {}
    pat = re.compile(r'^parametric_(const_len|IF|const_amp)_(C\d+)_((?:Q\d{1,2}\d{1,2}))_(\d{4})$')
    for name, val in ns.items():
        m = pat.match(name)
        if not m:
            continue
        kind, controller, pair, code = m.groups()
        slot = params.setdefault(pair, {}).setdefault(controller, {}).setdefault(code, {})
        slot[kind] = val
    return params

def closest_number(lst, target):
    return min(lst, key=lambda x: abs(x - target))

def to_pair_label(qp: str) -> str:
    # Extract two integers from strings like "q2-1", "Q10-12", "q12_10", etc.
    a, b = sorted(map(int, re.findall(r'\d+', qp)[:2]))
    return f"Q{a}{b}"


def get_full_scale_power_dBm_and_amplitude(desired_power: float, max_amplitude: float = 0.5) -> tuple[int, float]:
    """Get the full_scale_power_dbm and waveform amplitude for the MW FEM to output the specified desired power.

    The keyword `full_scale_power_dbm` is the maximum power of normalized pulse waveforms in [-1,1].
    To convert to voltage:
        power_mw = 10**(full_scale_power_dbm / 10)
        max_voltage_amp = np.sqrt(2 * power_mw * 50 / 1000)
        amp_in_volts = waveform * max_voltage_amp
        ^ equivalent to OPX+ amp
    Its range is -11dBm to +16dBm with 3dBm steps.

    Args:
        desired_power (float): Desired output power in dBm.
        max_amplitude (float, optional): Maximum allowed waveform amplitude in V. Default is 0.5V.

    Returns:
        tuple[float, float]: The full_scale_power_dBm and waveform amplitude realizing the desired power.
    """
    allowed_powers = [-11, -8, -5, -2, 1, 4, 7, 10, 13, 16]
    resulting_power = desired_power - 20 * np.log10(max_amplitude)
    if resulting_power < 0:
        full_scale_power_dBm = closest_number(allowed_powers, max(resulting_power + 3, -11))
    else:
        full_scale_power_dBm = closest_number(allowed_powers, min(resulting_power + 3, 16))
    amplitude = 10 ** ((desired_power - full_scale_power_dBm) / 20)
    if -11 <= full_scale_power_dBm <= 16 and -1 <= amplitude <= 1:
        return full_scale_power_dBm, amplitude
    else:
        raise ValueError(
            f"The desired power is outside the specifications ([-11; +16]dBm, [-1; +1]), got ({full_scale_power_dBm}; {amplitude})"
        )


########################################################################################################################
# %%                                    Resonator parameters
########################################################################################################################
# Update frequencies - be aware of coupled ports for bands
# The keyword "band" refers to the following frequency bands:
#   1: (50 MHz - 5.5 GHz)
#   2: (4.5 GHz - 7.5 GHz)
#   3: (6.5 GHz - 10.5 GHz)
# Note that the "coupled" ports O1 & I1, O2 & O3, O4 & O5, O6 & O7, and O8 & I2 must be in the same band.

# Resonator frequencies
resonator_LO_1 = 7.0 * u.GHz 
resonator_LO_2 = 7.0 * u.GHz 
resonator_LO_3 = 7.0 * u.GHz 

# LO frequencies indexed to qubit number
rr_LO = [resonator_LO_2, resonator_LO_2, resonator_LO_3, resonator_LO_3,
         resonator_LO_2, resonator_LO_2, resonator_LO_2, resonator_LO_3,
         resonator_LO_2, resonator_LO_2, resonator_LO_2, resonator_LO_3,
         resonator_LO_2, resonator_LO_2, resonator_LO_2, resonator_LO_3,
         resonator_LO_2, resonator_LO_2, resonator_LO_2, resonator_LO_3, 
         resonator_LO_3]

# Resonators IF
resonator_IF_q1 = (50) * u.MHz 
resonator_IF_q2 = (60) * u.MHz 
resonator_IF_q3 = (70) * u.MHz
resonator_IF_q4 = (80) * u.MHz 
resonator_IF_q5 = (90) * u.MHz 
resonator_IF_q6 = (100) * u.MHz 
resonator_IF_q7 = (110) * u.MHz 
resonator_IF_q8 = (120) * u.MHz 
resonator_IF_q9 = (130) * u.MHz 
resonator_IF_q10 = (140) * u.MHz 
resonator_IF_q11 = (150) * u.MHz 
resonator_IF_q12 = (160) * u.MHz 
resonator_IF_q13 = (170) * u.MHz 
resonator_IF_q14 = (180) * u.MHz 
resonator_IF_q15 = (190) * u.MHz
resonator_IF_q16 = (200) * u.MHz
resonator_IF_q17 = (210) * u.MHz 
resonator_IF_q18 = (220) * u.MHz 
resonator_IF_q19 = (230) * u.MHz
resonator_IF_q20 = (240) * u.MHz
resonator_IF_q_C6 = (250) * u.MHz 
rr_if = [
    resonator_IF_q1, resonator_IF_q2, resonator_IF_q3, resonator_IF_q4, resonator_IF_q5,
    resonator_IF_q6, resonator_IF_q7, resonator_IF_q8, resonator_IF_q9, resonator_IF_q10,
    resonator_IF_q11, resonator_IF_q12, resonator_IF_q13, resonator_IF_q14, resonator_IF_q15,
    resonator_IF_q16, resonator_IF_q17, resonator_IF_q18, resonator_IF_q19, resonator_IF_q20,
    resonator_IF_q_C6
]
rr_freq = np.array(rr_if) + np.array(rr_LO) 

assert np.all(np.abs(rr_if) < 400 * u.MHz), (
    "The resonator intermediate frequency must be within [-400; 400] MHz. \n"
    f"Readout IF frequencies: {rr_if} \n"
)

# Desired output power in dBm - Must be within [-80, 16] dBm
readout_power = -8

time_of_flight = 28 + 348 
time_of_flight = 28 + 348 -12 
depletion_time = 3 * u.us

# Update qubit rr freq and power
for k, qubit in enumerate(machine.qubits.values()):
    qubit.resonator.f_01 = rr_freq.tolist()[k]  # Resonator frequency optimized for discriminating 0 (|g>) and 1 (|e>)
    qubit.resonator.RF_frequency = qubit.resonator.f_01  # Readout frequency
    qubit.resonator.opx_output.full_scale_power_dbm = readout_power  # Max readout power in dBm
    qubit.resonator.opx_output.upconverter_frequency = rr_LO[k]  # Readout up-converter frequency
    qubit.resonator.opx_input.band = get_band(rr_LO[k])  # Readout band for the up-conversion
    qubit.resonator.opx_output.band = get_band(rr_LO[k])  # Readout band for the down-conversion
    qubit.resonator.time_of_flight = time_of_flight
    qubit.resonator.depletion_time = depletion_time
########################################################################################################################
# %%                                    Qubit parameters
########################################################################################################################
# The keyword "band" refers to the following frequency bands:
#   1: (50 MHz - 5.5 GHz)
#   2: (4.5 GHz - 7.5 GHz)
#   3: (6.5 GHz - 10.5 GHz)
# Note that the "coupled" ports O1 & I1, O2 & O3, O4 & O5, O6 & O7, and O8 & I2 must be in the same band.

# Qubit drive frequencies
qubit_LO_q1 = 5.5 * u.GHz
qubit_LO_q2 = 5.5 * u.GHz
qubit_LO_q3 = 5.5 * u.GHz 
qubit_LO_q4 = 5.5 * u.GHz
qubit_LO_q5 = 5.5* u.GHz
qubit_LO_q6 = 5.5 * u.GHz 
qubit_LO_q7 = 5.5 * u.GHz 
qubit_LO_q8 = 5.5 * u.GHz
qubit_LO_q9 = 5.5* u.GHz
qubit_LO_q10 = 5.5 * u.GHz
qubit_LO_q11 = 5.5 * u.GHz
qubit_LO_q12 = 5.5 * u.GHz
qubit_LO_q13 = 5.5 * u.GHz
qubit_LO_q14 = 5.5 * u.GHz
qubit_LO_q15 = 5.5 * u.GHz
qubit_LO_q16 = 5.5 * u.GHz
qubit_LO_q17 = 5.5 * u.GHz
qubit_LO_q18 = 5.5 * u.GHz
qubit_LO_q19 = 5.5 * u.GHz
qubit_LO_q20 = 5.5 * u.GHz
qubit_LO_q_C6 = (5.5) * u.GHz
qubit_LO = [
    qubit_LO_q1, qubit_LO_q2, qubit_LO_q3, qubit_LO_q4, qubit_LO_q5,
    qubit_LO_q6, qubit_LO_q7, qubit_LO_q8, qubit_LO_q9, qubit_LO_q10,
    qubit_LO_q11, qubit_LO_q12, qubit_LO_q13, qubit_LO_q14, qubit_LO_q15,
    qubit_LO_q16, qubit_LO_q17, qubit_LO_q18, qubit_LO_q19, qubit_LO_q20,
    qubit_LO_q_C6]

qubit_IF_q1 = (110) * u.MHz 
qubit_IF_q2 = (120) * u.MHz 
qubit_IF_q3 = (130) * u.MHz 
qubit_IF_q4 = (140) * u.MHz 
qubit_IF_q5 = (150) * u.MHz
qubit_IF_q6 = (160) * u.MHz 
qubit_IF_q7 = (170) * u.MHz 
qubit_IF_q8 = (180) * u.MHz
qubit_IF_q9 = (190) * u.MHz
qubit_IF_q10 = (200) * u.MHz
qubit_IF_q11 = (210) * u.MHz
qubit_IF_q12 = (220) * u.MHz
qubit_IF_q13 = (230) * u.MHz
qubit_IF_q14 = (240) * u.MHz
qubit_IF_q15 = (250) * u.MHz
qubit_IF_q16 = (260) * u.MHz
qubit_IF_q17 = (270) * u.MHz
qubit_IF_q18 =  (280) * u.MHz 
qubit_IF_q19 = (290) * u.MHz
qubit_IF_q20 = (300) * u.MHz
qubit_IF_q_C6 = (0) * u.MHz
qubit_IF = [
    qubit_IF_q1, qubit_IF_q2, qubit_IF_q3, qubit_IF_q4, qubit_IF_q5,
    qubit_IF_q6, qubit_IF_q7, qubit_IF_q8, qubit_IF_q9, qubit_IF_q10,
    qubit_IF_q11, qubit_IF_q12, qubit_IF_q13, qubit_IF_q14, qubit_IF_q15,
    qubit_IF_q16, qubit_IF_q17, qubit_IF_q18, qubit_IF_q19, qubit_IF_q20,
    qubit_IF_q_C6]

qubit_freq = np.array(qubit_IF) + np.array(qubit_LO)

assert np.all(np.abs(qubit_IF) < 400 * u.MHz), (
    "The xy intermediate frequency must be within [-400; 400] MHz. \n"
    f"Qubit drive IF frequencies: {qubit_IF} \n"
)
# Relaxation time
qubit1_T1 = 50 * u.us
qubit2_T1 = 50 * u.us
thermalization_time = 5 * max(qubit1_T1, qubit2_T1)

# Transmon anharmonicity
anharmonicity_q1 = -250 * u.MHz
anharmonicity_q2 = -250 * u.MHz
anharmonicity_q3 = -250 * u.MHz
anharmonicity_q4 = -250 * u.MHz
anharmonicity_q5 = -250 * u.MHz
anharmonicity_q6 = -250 * u.MHz
anharmonicity_q7 = -250 * u.MHz
anharmonicity_q8 = -250 * u.MHz
anharmonicity_q9 = -250 * u.MHz
anharmonicity_q10 = -250 * u.MHz
anharmonicity_q11 = -250 * u.MHz
anharmonicity_q12 = -250 * u.MHz
anharmonicity_q13 = -250 * u.MHz
anharmonicity_q14 = -250 * u.MHz
anharmonicity_q15 = -250 * u.MHz
anharmonicity_q16 = -250 * u.MHz
anharmonicity_q17 = -250 * u.MHz
anharmonicity_q18 = -250 * u.MHz
anharmonicity_q19 = -250 * u.MHz
anharmonicity_q20 = -250 * u.MHz
anharmonicity_q_C6 = -250 * u.MHz

anharmonicity = [
    anharmonicity_q1, anharmonicity_q2, anharmonicity_q3, anharmonicity_q4, anharmonicity_q5,
    anharmonicity_q6, anharmonicity_q7, anharmonicity_q8, anharmonicity_q9, anharmonicity_q10,
    anharmonicity_q11, anharmonicity_q12, anharmonicity_q13, anharmonicity_q14, anharmonicity_q15,
    anharmonicity_q16, anharmonicity_q17, anharmonicity_q18, anharmonicity_q19, anharmonicity_q20,
    anharmonicity_q_C6]

# Desired output power in dBm
qubit_power = -5
# Update qubit xy freq and power
for k, qubit in enumerate(machine.qubits.values()):
    qubit.f_01 = qubit_freq.tolist()[k]  # Qubit 0 to 1 (|g> -> |e>) transition frequency
    qubit.xy.RF_frequency = qubit.f_01  # Qubit drive frequency
    qubit.xy.opx_output.full_scale_power_dbm = qubit_power  # Max drive power in dBm
    qubit.xy.opx_output.upconverter_frequency = qubit_LO[k]  # Qubit drive up-converter frequency
    qubit.xy.opx_output.band = get_band(qubit_LO[k])  # Qubit drive band for the up-conversion
    qubit.grid_location = f"{k},0"  # Qubit grid location for plotting as "column,row"
    #qubit.thermalization_time = thermalization_time   # NEEDS A SETTER
    qubit.T1 = qubit1_T1
    qubit.anharmonicity = anharmonicity[k]

########################################################################################################################
# %%                                    Flux parameters
########################################################################################################################
# The "output_mode" can be used to tailor the max voltage and frequency bandwidth, i.e.,
#   "direct":    1Vpp (-0.5V to 0.5V), 750MHz bandwidth
#   "amplified": 5Vpp (-2.5V to 2.5V), 350MHz bandwidth
# At 1 GS/s, use the "upsampling_mode" to optimize output for
#   modulated pulses (optimized for modulated pulses): "mw"
#   baseband pulses (optimized for clean step response): "pulse"

flux_settle_time = 100 * u.ns


# Update flux channels
# for k, qubit in enumerate(machine.qubits.values()):
#     if hasattr(qubit, "z"):
#         qubit.z.opx_output.output_mode = "direct"
#         qubit.z.opx_output.upsampling_mode = "pulse"
#         qubit.z.settle_time = flux_settle_time 
########################################################################################################################
# %%                                        Pulse parameters
########################################################################################################################
# How to add new pulses
# from quam.components.pulses import (
#     SquarePulse,
#     DragGaussianPulse,
#     DragCosinePulse,
#     FlatTopGaussianPulse,
#     WaveformPulse,
#     SquareReadoutPulse,
# )
# e.g., machine.qubits[q].xy.operations["new_pulse"] = FlatTopGaussianPulse(...)

# CW pulse parameter
const_len = 1000
const_amp = 0.35 
const_amp_dc = 1.0 

frequency_sine_Hz=10e6
# Saturation_pulse
saturation_len = 10 * u.us
saturation_amp = 0.35
# Pi pulse parameters
pi_len = 20
pi_sigma = pi_len / 5

pi_amp_q1 = 0.1
pi_amp_q2 = 0.15
pi_amp_q3 = 0.2
pi_amp_q4 = 0.25
pi_amp_q5 = 0.3
pi_amp_q6 = 0.35
pi_amp_q7 = 0.4
pi_amp_q8 = 0.45
pi_amp_q9 = 0.5
pi_amp_q10 = 0.55
pi_amp_q11 = 0.6
pi_amp_q12 = 0.65
pi_amp_q13 = 0.7
pi_amp_q14 = 0.75
pi_amp_q15 = 0.8
pi_amp_q16 = 0.85
pi_amp_q17 = 0.9
pi_amp_q18 = 0.95
pi_amp_q19 = 1.0
pi_amp_q20 = 0.05
pi_amp_q_C6 = 0.2
pi_amp = [
    pi_amp_q1, pi_amp_q2, pi_amp_q3, pi_amp_q4, pi_amp_q5,
    pi_amp_q6, pi_amp_q7, pi_amp_q8, pi_amp_q9, pi_amp_q10,
    pi_amp_q11, pi_amp_q12, pi_amp_q13, pi_amp_q14, pi_amp_q15,
    pi_amp_q16, pi_amp_q17, pi_amp_q18, pi_amp_q19, pi_amp_q20,
    pi_amp_q_C6]

# DRAG coefficients
drag_coef_q1 = 0.05
drag_coef_q2 = 0.1
drag_coef_q3 = 0.15
drag_coef_q4 = 0.2
drag_coef_q5 = 0.25
drag_coef_q6 = 0.3
drag_coef_q7 = 0.35
drag_coef_q8 = 0.4
drag_coef_q9 = 0.45
drag_coef_q10 = 0.5
drag_coef_q11 = 0.55 
drag_coef_q12 = 0.6
drag_coef_q13 = 0.65
drag_coef_q14 = 0.7
drag_coef_q15 = 0.75
drag_coef_q16 = 0.8
drag_coef_q17 = 0.85
drag_coef_q18 = 0.9
drag_coef_q19 = 0.95
drag_coef_q20 = 1.0
drag_coef_q_C6 = 0.500

drag_coef = [
    drag_coef_q1, drag_coef_q2, drag_coef_q3, drag_coef_q4, drag_coef_q5,
    drag_coef_q6, drag_coef_q7, drag_coef_q8, drag_coef_q9, drag_coef_q10,
    drag_coef_q11, drag_coef_q12, drag_coef_q13, drag_coef_q14, drag_coef_q15,
    drag_coef_q16, drag_coef_q17, drag_coef_q18, drag_coef_q19, drag_coef_q20,
    drag_coef_q_C6]

AC_stark_detuning_q1 = 0 * u.MHz
AC_stark_detuning_q2 = 0 * u.MHz
AC_stark_detuning_q3 = 0 * u.MHz
AC_stark_detuning_q4 = 0 * u.MHz
AC_stark_detuning_q5 = 0 * u.MHz
AC_stark_detuning_q6 = 0 * u.MHz
AC_stark_detuning_q7 = 0 * u.MHz
AC_stark_detuning_q8 = 0 * u.MHz
AC_stark_detuning_q9 = 0 * u.MHz
AC_stark_detuning_q10 = 0 * u.MHz
AC_stark_detuning_q11 = 0 * u.MHz
AC_stark_detuning_q12 = 0 * u.MHz
AC_stark_detuning_q13 = 0 * u.MHz
AC_stark_detuning_q14 = 0 * u.MHz
AC_stark_detuning_q15 = 0 * u.MHz
AC_stark_detuning_q16 = 0 * u.MHz
AC_stark_detuning_q17 = 0 * u.MHz
AC_stark_detuning_q18 = 0 * u.MHz
AC_stark_detuning_q19 = 0 * u.MHz
AC_stark_detuning_q20 = 0 * u.MHz
AC_stark_detuning_q_C6 = 0 * u.MHz

AC_stark_detuning = [
    AC_stark_detuning_q1, AC_stark_detuning_q2, AC_stark_detuning_q3, AC_stark_detuning_q4, AC_stark_detuning_q5,
    AC_stark_detuning_q6, AC_stark_detuning_q7, AC_stark_detuning_q8, AC_stark_detuning_q9, AC_stark_detuning_q10,
    AC_stark_detuning_q11, AC_stark_detuning_q12, AC_stark_detuning_q13, AC_stark_detuning_q14, AC_stark_detuning_q15,
    AC_stark_detuning_q16, AC_stark_detuning_q17, AC_stark_detuning_q18, AC_stark_detuning_q19, AC_stark_detuning_q20,
    AC_stark_detuning_q_C6]


readout_len = 2000 

readout_amp_q1 = 0.2
readout_amp_q2 = 0.3
readout_amp_q3 = 0.4
readout_amp_q4 = 0.5
readout_amp_q5 = 0.6
readout_amp_q6 = 0.7 
readout_amp_q7 = 0.8 
readout_amp_q8 = 0.9 
readout_amp_q9 = 0.1
readout_amp_q10 = 0.2
readout_amp_q11 = 0.3 
readout_amp_q12 = 0.4 
readout_amp_q13 = 0.5
readout_amp_q14 = 0.6 
readout_amp_q15 = 0.7 
readout_amp_q16 = 0.8 
readout_amp_q17 = 0.9
readout_amp_q18 = 1.0
readout_amp_q19 = 0.1 
readout_amp_q20 = 0.2
readout_amp_q_C6 = 0.3

readout_amp = [
    readout_amp_q1, readout_amp_q2, readout_amp_q3, readout_amp_q4, readout_amp_q5,
    readout_amp_q6, readout_amp_q7, readout_amp_q8, readout_amp_q9, readout_amp_q10,
    readout_amp_q11, readout_amp_q12, readout_amp_q13, readout_amp_q14, readout_amp_q15,
    readout_amp_q16, readout_amp_q17, readout_amp_q18, readout_amp_q19, readout_amp_q20,
    readout_amp_q_C6]

rotation_angle_q1 = ((10)/ 180) * np.pi
rotation_angle_q2 = ((20)/ 180) * np.pi
rotation_angle_q3 = ((30) / 180) * np.pi
rotation_angle_q4 = ((40) / 180) * np.pi
rotation_angle_q5 = ((50) / 180) * np.pi
rotation_angle_q6 = ((60) / 180) * np.pi
rotation_angle_q7 = ((70) / 180) * np.pi
rotation_angle_q8 = ((80) / 180) * np.pi
rotation_angle_q9 = (90 / 180) * np.pi
rotation_angle_q10 = (100 / 180) * np.pi
rotation_angle_q11 = ((110) / 180) * np.pi
rotation_angle_q12 = ((120) / 180) * np.pi
rotation_angle_q13 = ((130) / 180) * np.pi
rotation_angle_q14 = ((140) / 180) * np.pi
rotation_angle_q15 = ((150) / 180) * np.pi
rotation_angle_q16 = ((160) / 180) * np.pi
rotation_angle_q17 = (170 / 180) * np.pi
rotation_angle_q18 = ((180) / 180) * np.pi
rotation_angle_q19 = ((190) / 180) * np.pi
rotation_angle_q20 = ((200) / 180) * np.pi
rotation_angle_q_C6 = ((210) / 180) * np.pi

rotation_angle = [rotation_angle_q1, rotation_angle_q2, rotation_angle_q3, rotation_angle_q4, rotation_angle_q5, 
                  rotation_angle_q6, rotation_angle_q7, rotation_angle_q8, rotation_angle_q9, rotation_angle_q10,
                  rotation_angle_q11, rotation_angle_q12, rotation_angle_q13, rotation_angle_q14, rotation_angle_q15,
                  rotation_angle_q16, rotation_angle_q17, rotation_angle_q18, rotation_angle_q19, rotation_angle_q20,
                  rotation_angle_q_C6]

## Update pulses
for k, q in enumerate(machine.qubits):
    # readout
    machine.qubits[q].resonator.operations["readout"].length = readout_len
    machine.qubits[q].resonator.operations["readout"].amplitude = readout_amp[k]
    machine.qubits[q].resonator.operations["readout"].integration_weights_angle = 0.0
    #machine.qubits[q].resonator.operations["readout"].integration_weights = [(1, readout_len)]

    machine.qubits[q].resonator.operations['readout_rot'] = SquareReadoutPulse(length=readout_len, amplitude=readout_amp[k])
    machine.qubits[q].resonator.operations["readout_rot"].integration_weights_angle = rotation_angle[k]
    #machine.qubits[q].resonator.operations["readout_rot"].integration_weights = [(1, readout_len)]
    # CW pulse
    # Qubit saturation
    machine.qubits[q].xy.operations["saturation"].length = saturation_len
    machine.qubits[q].xy.operations["saturation"].amplitude = saturation_amp
    # Single qubit gates - DragCosine
    add_DragCosine_pulses(
        machine.qubits[q],
        amplitude=pi_amp[k],
        length=pi_len,
        anharmonicity=anharmonicity[k],
        alpha=drag_coef[k],
        detuning=AC_stark_detuning[k],
    )
    # Single Gaussian flux pulse
    # if hasattr(machine.qubits[q], "z"):
    #     machine.qubits[q].z.operations["gauss"] = GaussianPulse(amplitude=0.1, length=200, sigma=40)

########################################################################################################################
# %%                                   Two qubit gate parameters
########################################################################################################################
parametric_const_len = 500 

#C1
parametric_const_len_C1_Q12_1001 = parametric_const_len
parametric_const_len_C1_Q12_1102 = parametric_const_len
parametric_const_len_C1_Q12_1120 = parametric_const_len

parametric_const_len_C1_Q15_1001 = parametric_const_len
parametric_const_len_C1_Q15_1102 = parametric_const_len
parametric_const_len_C1_Q15_1120 = parametric_const_len

parametric_const_len_C1_Q16_1001 = parametric_const_len
parametric_const_len_C1_Q16_1102 = parametric_const_len
parametric_const_len_C1_Q16_1120 = parametric_const_len

parametric_const_len_C1_Q25_1001 = parametric_const_len
parametric_const_len_C1_Q25_1102 = parametric_const_len
parametric_const_len_C1_Q25_1120 = parametric_const_len

parametric_const_len_C1_Q26_1001 = parametric_const_len
parametric_const_len_C1_Q26_1102 = parametric_const_len
parametric_const_len_C1_Q26_1120 = parametric_const_len

parametric_const_len_C1_Q56_1001 = parametric_const_len
parametric_const_len_C1_Q56_1102 = parametric_const_len
parametric_const_len_C1_Q56_1120 = parametric_const_len

#C4
parametric_const_len_C4_Q56_1001 = parametric_const_len
parametric_const_len_C4_Q56_1102 = parametric_const_len
parametric_const_len_C4_Q56_1120 = parametric_const_len

parametric_const_len_C4_Q59_1001 = parametric_const_len
parametric_const_len_C4_Q59_1102 = parametric_const_len
parametric_const_len_C4_Q59_1120 = parametric_const_len

parametric_const_len_C4_Q510_1001 = parametric_const_len
parametric_const_len_C4_Q510_1102 = parametric_const_len
parametric_const_len_C4_Q510_1120 = parametric_const_len

parametric_const_len_C4_Q69_1001 = parametric_const_len
parametric_const_len_C4_Q69_1102 = parametric_const_len
parametric_const_len_C4_Q69_1120 = parametric_const_len

parametric_const_len_C4_Q610_1001 = parametric_const_len
parametric_const_len_C4_Q610_1102 = parametric_const_len
parametric_const_len_C4_Q610_1120 = parametric_const_len

parametric_const_len_C4_Q910_1001 = parametric_const_len
parametric_const_len_C4_Q910_1102 = parametric_const_len
parametric_const_len_C4_Q910_1120 = parametric_const_len

#C6
parametric_const_len_C6_Q910_1001 = parametric_const_len
parametric_const_len_C6_Q910_1102 = parametric_const_len
parametric_const_len_C6_Q910_1120 = parametric_const_len

parametric_const_len_C6_Q913_1001 = parametric_const_len
parametric_const_len_C6_Q913_1102 = parametric_const_len
parametric_const_len_C6_Q913_1120 = parametric_const_len

parametric_const_len_C6_Q914_1001 = parametric_const_len
parametric_const_len_C6_Q914_1102 = parametric_const_len
parametric_const_len_C6_Q914_1120 = parametric_const_len

parametric_const_len_C6_Q1013_1001 = parametric_const_len
parametric_const_len_C6_Q1013_1102 = parametric_const_len
parametric_const_len_C6_Q1013_1120 = parametric_const_len

parametric_const_len_C6_Q1014_1001 = parametric_const_len
parametric_const_len_C6_Q1014_1102 = parametric_const_len
parametric_const_len_C6_Q1014_1120 = parametric_const_len

parametric_const_len_C6_Q1314_1001 = parametric_const_len
parametric_const_len_C6_Q1314_1102 = parametric_const_len
parametric_const_len_C6_Q1314_1120 = parametric_const_len

#C8
parametric_const_len_C8_Q1314_1001 = parametric_const_len
parametric_const_len_C8_Q1314_1102 = parametric_const_len
parametric_const_len_C8_Q1314_1120 = parametric_const_len

parametric_const_len_C8_Q1317_1001 = parametric_const_len
parametric_const_len_C8_Q1317_1102 = parametric_const_len
parametric_const_len_C8_Q1317_1120 = parametric_const_len

parametric_const_len_C8_Q1318_1001 = parametric_const_len
parametric_const_len_C8_Q1318_1102 = parametric_const_len
parametric_const_len_C8_Q1318_1120 = parametric_const_len

parametric_const_len_C8_Q1417_1001 = parametric_const_len
parametric_const_len_C8_Q1417_1102 = parametric_const_len
parametric_const_len_C8_Q1417_1120 = parametric_const_len

parametric_const_len_C8_Q1418_1001 = parametric_const_len
parametric_const_len_C8_Q1418_1102 = parametric_const_len
parametric_const_len_C8_Q1418_1120 = parametric_const_len

parametric_const_len_C8_Q1718_1001 = parametric_const_len
parametric_const_len_C8_Q1718_1102 = parametric_const_len
parametric_const_len_C8_Q1718_1120 = parametric_const_len

# ---- C3 lengths ----
parametric_const_len_C3_Q34_1001 = parametric_const_len
parametric_const_len_C3_Q34_1102 = parametric_const_len
parametric_const_len_C3_Q34_1120 = parametric_const_len

parametric_const_len_C3_Q38_1001 = parametric_const_len
parametric_const_len_C3_Q38_1102 = parametric_const_len
parametric_const_len_C3_Q38_1120 = parametric_const_len

parametric_const_len_C3_Q37_1001 = parametric_const_len
parametric_const_len_C3_Q37_1102 = parametric_const_len
parametric_const_len_C3_Q37_1120 = parametric_const_len

parametric_const_len_C3_Q48_1001 = parametric_const_len
parametric_const_len_C3_Q48_1102 = parametric_const_len
parametric_const_len_C3_Q48_1120 = parametric_const_len

parametric_const_len_C3_Q47_1001 = parametric_const_len
parametric_const_len_C3_Q47_1102 = parametric_const_len
parametric_const_len_C3_Q47_1120 = parametric_const_len

parametric_const_len_C3_Q78_1001 = parametric_const_len
parametric_const_len_C3_Q78_1102 = parametric_const_len
parametric_const_len_C3_Q78_1120 = parametric_const_len

# ---- C5 lengths ----
parametric_const_len_C5_Q78_1001 = parametric_const_len
parametric_const_len_C5_Q78_1102 = parametric_const_len
parametric_const_len_C5_Q78_1120 = parametric_const_len

parametric_const_len_C5_Q712_1001 = parametric_const_len
parametric_const_len_C5_Q712_1102 = parametric_const_len
parametric_const_len_C5_Q712_1120 = parametric_const_len

parametric_const_len_C5_Q711_1001 = parametric_const_len
parametric_const_len_C5_Q711_1102 = parametric_const_len
parametric_const_len_C5_Q711_1120 = parametric_const_len

parametric_const_len_C5_Q812_1001 = parametric_const_len
parametric_const_len_C5_Q812_1102 = parametric_const_len
parametric_const_len_C5_Q812_1120 = parametric_const_len

parametric_const_len_C5_Q811_1001 = parametric_const_len
parametric_const_len_C5_Q811_1102 = parametric_const_len
parametric_const_len_C5_Q811_1120 = parametric_const_len

parametric_const_len_C5_Q1112_1001 = parametric_const_len
parametric_const_len_C5_Q1112_1102 = parametric_const_len
parametric_const_len_C5_Q1112_1120 = parametric_const_len

# ---- C7 lengths ----
parametric_const_len_C7_Q1112_1001 = parametric_const_len
parametric_const_len_C7_Q1112_1102 = parametric_const_len
parametric_const_len_C7_Q1112_1120 = parametric_const_len

parametric_const_len_C7_Q1116_1001 = parametric_const_len
parametric_const_len_C7_Q1116_1102 = parametric_const_len
parametric_const_len_C7_Q1116_1120 = parametric_const_len

parametric_const_len_C7_Q1115_1001 = parametric_const_len
parametric_const_len_C7_Q1115_1102 = parametric_const_len
parametric_const_len_C7_Q1115_1120 = parametric_const_len

parametric_const_len_C7_Q1216_1001 = parametric_const_len
parametric_const_len_C7_Q1216_1102 = parametric_const_len
parametric_const_len_C7_Q1216_1120 = parametric_const_len

parametric_const_len_C7_Q1215_1001 = parametric_const_len
parametric_const_len_C7_Q1215_1102 = parametric_const_len
parametric_const_len_C7_Q1215_1120 = parametric_const_len

parametric_const_len_C7_Q1516_1001 = parametric_const_len
parametric_const_len_C7_Q1516_1102 = parametric_const_len
parametric_const_len_C7_Q1516_1120 = parametric_const_len

# ---- C10 lengths ----
parametric_const_len_C10_Q1516_1001 = parametric_const_len
parametric_const_len_C10_Q1516_1102 = parametric_const_len
parametric_const_len_C10_Q1516_1120 = parametric_const_len

parametric_const_len_C10_Q1520_1001 = parametric_const_len
parametric_const_len_C10_Q1520_1102 = parametric_const_len
parametric_const_len_C10_Q1520_1120 = parametric_const_len

parametric_const_len_C10_Q1519_1001 = parametric_const_len
parametric_const_len_C10_Q1519_1102 = parametric_const_len
parametric_const_len_C10_Q1519_1120 = parametric_const_len

parametric_const_len_C10_Q1620_1001 = parametric_const_len
parametric_const_len_C10_Q1620_1102 = parametric_const_len
parametric_const_len_C10_Q1620_1120 = parametric_const_len

parametric_const_len_C10_Q1619_1001 = parametric_const_len
parametric_const_len_C10_Q1619_1102 = parametric_const_len
parametric_const_len_C10_Q1619_1120 = parametric_const_len

parametric_const_len_C10_Q1920_1001 = parametric_const_len
parametric_const_len_C10_Q1920_1102 = parametric_const_len
parametric_const_len_C10_Q1920_1120 = parametric_const_len

parametric_const_len_C2_Q37_1001 = parametric_const_len
parametric_const_len_C2_Q37_1102 = parametric_const_len
parametric_const_len_C2_Q37_1120 = parametric_const_len

parametric_const_len_C2_Q36_1001 = parametric_const_len
parametric_const_len_C2_Q36_1102 = parametric_const_len
parametric_const_len_C2_Q36_1120 = parametric_const_len

parametric_const_len_C2_Q67_1001 = parametric_const_len
parametric_const_len_C2_Q67_1102 = parametric_const_len
parametric_const_len_C2_Q67_1120 = parametric_const_len

parametric_const_len_C9_Q1519_1001 = parametric_const_len
parametric_const_len_C9_Q1519_1102 = parametric_const_len
parametric_const_len_C9_Q1519_1120 = parametric_const_len

parametric_const_len_C9_Q1415_1001 = parametric_const_len
parametric_const_len_C9_Q1415_1102 = parametric_const_len
parametric_const_len_C9_Q1415_1120 = parametric_const_len

parametric_const_len_C9_Q1419_1001 = parametric_const_len
parametric_const_len_C9_Q1419_1102 = parametric_const_len
parametric_const_len_C9_Q1419_1120 = parametric_const_len





#C1
parametric_IF_C1_Q12_1001 = (50) * u.MHz
parametric_IF_C1_Q12_1102 = (100) * u.MHz
parametric_IF_C1_Q12_1120 = (150) * u.MHz

parametric_IF_C1_Q15_1001 = (200) * u.MHz
parametric_IF_C1_Q15_1102 = (250) * u.MHz
parametric_IF_C1_Q15_1120 = (300) * u.MHz

parametric_IF_C1_Q16_1001 = (350) * u.MHz
parametric_IF_C1_Q16_1102 = (400) * u.MHz
parametric_IF_C1_Q16_1120 = (450) * u.MHz

parametric_IF_C1_Q25_1001 = (50) * u.MHz
parametric_IF_C1_Q25_1102 = (100) * u.MHz
parametric_IF_C1_Q25_1120 = (150) * u.MHz

parametric_IF_C1_Q26_1001 = (200) * u.MHz
parametric_IF_C1_Q26_1102 = (250) * u.MHz
parametric_IF_C1_Q26_1120 = (300) * u.MHz

parametric_IF_C1_Q56_1001 = (350) * u.MHz
parametric_IF_C1_Q56_1102 = (400) * u.MHz
parametric_IF_C1_Q56_1120 = (450) * u.MHz



#C4
parametric_IF_C4_Q56_1001 = (50) * u.MHz
parametric_IF_C4_Q56_1102 = (100) * u.MHz
parametric_IF_C4_Q56_1120 = (150) * u.MHz

parametric_IF_C4_Q59_1001 = (200) * u.MHz
parametric_IF_C4_Q59_1102 = (250) * u.MHz
parametric_IF_C4_Q59_1120 = (300) * u.MHz

parametric_IF_C4_Q510_1001 = (350) * u.MHz
parametric_IF_C4_Q510_1102 = (400) * u.MHz
parametric_IF_C4_Q510_1120 = (450) * u.MHz

parametric_IF_C4_Q69_1001 = (50) * u.MHz
parametric_IF_C4_Q69_1102 = (100) * u.MHz
parametric_IF_C4_Q69_1120 = (150) * u.MHz

parametric_IF_C4_Q610_1001 = (200) * u.MHz
parametric_IF_C4_Q610_1102 = (250) * u.MHz
parametric_IF_C4_Q610_1120 = (300) * u.MHz

parametric_IF_C4_Q910_1001 = (350) * u.MHz
parametric_IF_C4_Q910_1102 = (400) * u.MHz
parametric_IF_C4_Q910_1120 = (450) * u.MHz




#C6
parametric_IF_C6_Q910_1001 = (50) * u.MHz
parametric_IF_C6_Q910_1102 = (100) * u.MHz
parametric_IF_C6_Q910_1120 = (150) * u.MHz

parametric_IF_C6_Q913_1001 = (200) * u.MHz
parametric_IF_C6_Q913_1102 = (250) * u.MHz
parametric_IF_C6_Q913_1120 = (300) * u.MHz

parametric_IF_C6_Q914_1001 = (350) * u.MHz
parametric_IF_C6_Q914_1102 = (400) * u.MHz
parametric_IF_C6_Q914_1120 = (450) * u.MHz

parametric_IF_C6_Q1013_1001 = (50) * u.MHz
parametric_IF_C6_Q1013_1102 = (100) * u.MHz
parametric_IF_C6_Q1013_1120 = (150) * u.MHz

parametric_IF_C6_Q1014_1001 = (200) * u.MHz
parametric_IF_C6_Q1014_1102 = (250) * u.MHz 
parametric_IF_C6_Q1014_1120 = (300) * u.MHz

parametric_IF_C6_Q1314_1001 = (350) * u.MHz
parametric_IF_C6_Q1314_1102 = (400) * u.MHz
parametric_IF_C6_Q1314_1120 = (450) * u.MHz




#C8

parametric_IF_C8_Q1314_1001 = (50) * u.MHz
parametric_IF_C8_Q1314_1102 = (100) * u.MHz
parametric_IF_C8_Q1314_1120 = (150) * u.MHz

parametric_IF_C8_Q1317_1001 = (200) * u.MHz
parametric_IF_C8_Q1317_1102 = (250) * u.MHz
parametric_IF_C8_Q1317_1120 = (300) * u.MHz


parametric_IF_C8_Q1318_1001 = (350) * u.MHz
parametric_IF_C8_Q1318_1102 = (400) * u.MHz
parametric_IF_C8_Q1318_1120 = (450) * u.MHz

parametric_IF_C8_Q1417_1001 = (50) * u.MHz
parametric_IF_C8_Q1417_1102 = (100) * u.MHz
parametric_IF_C8_Q1417_1120 = (150) * u.MHz

parametric_IF_C8_Q1418_1001 = (200) * u.MHz
parametric_IF_C8_Q1418_1102 = (250) * u.MHz
parametric_IF_C8_Q1418_1120 = (300) * u.MHz

parametric_IF_C8_Q1718_1001 = (350) * u.MHz
parametric_IF_C8_Q1718_1102 = (400) * u.MHz
parametric_IF_C8_Q1718_1120 = (450) * u.MHz

# ---- C3 coupling frequencies (Δ/2) ----

# Q3–Q4
parametric_IF_C3_Q34_1001 = (50) * u.MHz   
parametric_IF_C3_Q34_1102 = (100) * u.MHz  
parametric_IF_C3_Q34_1120 = (150) * u.MHz   

# Q3–Q8
parametric_IF_C3_Q38_1001 = (200) * u.MHz   
parametric_IF_C3_Q38_1102 = (250) * u.MHz  
parametric_IF_C3_Q38_1120 = (300) * u.MHz 

# Q3–Q7 (provided)
parametric_IF_C3_Q37_1001 = (350) * u.MHz 
parametric_IF_C3_Q37_1102 = (400) * u.MHz  
parametric_IF_C3_Q37_1120 = (450) * u.MHz  

# Q4–Q8
parametric_IF_C3_Q48_1001 = (50) * u.MHz 
parametric_IF_C3_Q48_1102 = (100) * u.MHz  
parametric_IF_C3_Q48_1120 = (150) * u.MHz  

# Q4–Q7
parametric_IF_C3_Q47_1001 = (200) * u.MHz  
parametric_IF_C3_Q47_1102 = (250) * u.MHz  
parametric_IF_C3_Q47_1120 = (300) * u.MHz  

# Q7–Q8
parametric_IF_C3_Q78_1001 = (350) * u.MHz 
parametric_IF_C3_Q78_1102 = (400) * u.MHz  
parametric_IF_C3_Q78_1120 = (450) * u.MHz 

# ---- Corrected C5 coupling frequencies (Δ/2) ----

# C5_Q78 (Q7–Q8)
parametric_IF_C5_Q78_1001 = (50) * u.MHz 
parametric_IF_C5_Q78_1102 = (100) * u.MHz   
parametric_IF_C5_Q78_1120 = (150) * u.MHz  

# C5_Q712 (Q7–Q12)
parametric_IF_C5_Q712_1001 = (200) * u.MHz  
parametric_IF_C5_Q712_1102 = (250) * u.MHz  
parametric_IF_C5_Q712_1120 = (300) * u.MHz  

# C5_Q711 (Q7–Q11)
parametric_IF_C5_Q711_1001 = (350) * u.MHz 
parametric_IF_C5_Q711_1102 = (400) * u.MHz 
parametric_IF_C5_Q711_1120 = (450) * u.MHz  

# C5_Q812 (Q8–Q12)
parametric_IF_C5_Q812_1001 = (50) * u.MHz  
parametric_IF_C5_Q812_1102 = (100) * u.MHz  
parametric_IF_C5_Q812_1120 = (150) * u.MHz  

# C5_Q811 (Q8–Q11)
parametric_IF_C5_Q811_1001 = (200) * u.MHz  
parametric_IF_C5_Q811_1102 = (250) * u.MHz  
parametric_IF_C5_Q811_1120 = (300) * u.MHz  

# C5_Q1112 (Q11–Q12)
parametric_IF_C5_Q1112_1001 = (350) * u.MHz  
parametric_IF_C5_Q1112_1102 = (400) * u.MHz  
parametric_IF_C5_Q1112_1120 = (450) * u.MHz  

# ---- C7 coupling frequencies (Δ/2) ----

# Q11–Q12
parametric_IF_C7_Q1112_1001 = (50) * u.MHz 
parametric_IF_C7_Q1112_1102 = (100) * u.MHz 
parametric_IF_C7_Q1112_1120 = (150) * u.MHz 

# Q11–Q16
parametric_IF_C7_Q1116_1001 = (200) * u.MHz  
parametric_IF_C7_Q1116_1102 = (250) * u.MHz   
parametric_IF_C7_Q1116_1120 = (300) * u.MHz   

# Q11–Q15
parametric_IF_C7_Q1115_1001 = (350) * u.MHz 
parametric_IF_C7_Q1115_1102 = (400) * u.MHz   
parametric_IF_C7_Q1115_1120 = (450) * u.MHz  

# Q12–Q16
parametric_IF_C7_Q1216_1001 = (50) * u.MHz   
parametric_IF_C7_Q1216_1102 = (100) * u.MHz   
parametric_IF_C7_Q1216_1120 = (150) * u.MHz   

# Q12–Q15
parametric_IF_C7_Q1215_1001 = (200) * u.MHz   
parametric_IF_C7_Q1215_1102 = (250) * u.MHz   
parametric_IF_C7_Q1215_1120 = (300) * u.MHz    

# Q15–Q16
parametric_IF_C7_Q1516_1001 = (350) * u.MHz   
parametric_IF_C7_Q1516_1102 = (400) * u.MHz   
parametric_IF_C7_Q1516_1120 = (450) * u.MHz  

# ---- C10 coupling frequencies (Δ/2) ----

# C10_Q1516 (Q15–Q16)
parametric_IF_C10_Q1516_1001 = (50) * u.MHz 
parametric_IF_C10_Q1516_1102 = (100) * u.MHz 
parametric_IF_C10_Q1516_1120 = (150) * u.MHz   

# C10_Q1520 (Q15–Q20)
parametric_IF_C10_Q1520_1001 = (200) * u.MHz 
parametric_IF_C10_Q1520_1102 = (250) * u.MHz 
parametric_IF_C10_Q1520_1120 = (300) * u.MHz   

# C10_Q1519 (Q15–Q19)
parametric_IF_C10_Q1519_1001 = (350) * u.MHz 
parametric_IF_C10_Q1519_1102 = (400) * u.MHz 
parametric_IF_C10_Q1519_1120 = (450) * u.MHz   

# C10_Q1620 (Q16–Q20)
parametric_IF_C10_Q1620_1001 = (50) * u.MHz 
parametric_IF_C10_Q1620_1102 = (100) * u.MHz 
parametric_IF_C10_Q1620_1120 = (150) * u.MHz 

# C10_Q1619 (Q16–Q19)
parametric_IF_C10_Q1619_1001 = (200) * u.MHz   
parametric_IF_C10_Q1619_1102 = (250) * u.MHz
parametric_IF_C10_Q1619_1120 = (300) * u.MHz 

# C10_Q1920 (Q19–Q20)
parametric_IF_C10_Q1920_1001 = (350) * u.MHz 
parametric_IF_C10_Q1920_1102 = (400) * u.MHz   
parametric_IF_C10_Q1920_1120 = (450) * u.MHz   

# C2_Q37 (Q3–Q7)
parametric_IF_C2_Q37_1001 = (50) * u.MHz 
parametric_IF_C2_Q37_1102 = (100) * u.MHz   
parametric_IF_C2_Q37_1120 = (150) * u.MHz  

# C2_Q36 (Q3–Q6)
parametric_IF_C2_Q36_1001 = (200) * u.MHz  
parametric_IF_C2_Q36_1102 = (250) * u.MHz   
parametric_IF_C2_Q36_1120 = (300) * u.MHz   

# C2_Q67 (Q6–Q7)
parametric_IF_C2_Q67_1001 = (350) * u.MHz 
parametric_IF_C2_Q67_1102 = (400) * u.MHz   
parametric_IF_C2_Q67_1120 = (450) * u.MHz   

# C9_Q1519 (Q15–Q19)
parametric_IF_C9_Q1519_1001 = (50) * u.MHz 
parametric_IF_C9_Q1519_1102 = (100) * u.MHz 
parametric_IF_C9_Q1519_1120 = (150) * u.MHz 

# C9_Q1415 (Q14–Q15)
parametric_IF_C9_Q1415_1001 = (200) * u.MHz 
parametric_IF_C9_Q1415_1102 = (250) * u.MHz 
parametric_IF_C9_Q1415_1120 = (300) * u.MHz 

# C9_Q1419 (Q14–Q19)
parametric_IF_C9_Q1419_1001 = (350) * u.MHz 
parametric_IF_C9_Q1419_1102 = (400) * u.MHz 
parametric_IF_C9_Q1419_1120 = (450) * u.MHz 


#C1
parametric_const_amp_C1_Q12_1001 = 2.5
parametric_const_amp_C1_Q12_1102 = 2.5
parametric_const_amp_C1_Q12_1120 = 2.5

parametric_const_amp_C1_Q15_1001 = 2.5
parametric_const_amp_C1_Q15_1102 = 2.5
parametric_const_amp_C1_Q15_1120 = 2.5

parametric_const_amp_C1_Q16_1001 = 2.5
parametric_const_amp_C1_Q16_1102 = 2.5
parametric_const_amp_C1_Q16_1120 = 2.5

parametric_const_amp_C1_Q25_1001 = 2.5
parametric_const_amp_C1_Q25_1102 = 2.5
parametric_const_amp_C1_Q25_1120 = 2.5

parametric_const_amp_C1_Q26_1001 = 2.5
parametric_const_amp_C1_Q26_1102 = 2.5
parametric_const_amp_C1_Q26_1120 = 2.5

parametric_const_amp_C1_Q56_1001 = 2.5
parametric_const_amp_C1_Q56_1102 = 2.5
parametric_const_amp_C1_Q56_1120 = 2.5

#C4
parametric_const_amp_C4_Q56_1001 = 2.5
parametric_const_amp_C4_Q56_1102 = 2.5
parametric_const_amp_C4_Q56_1120 = 2.5

parametric_const_amp_C4_Q59_1001 = 2.5
parametric_const_amp_C4_Q59_1102 = 2.5
parametric_const_amp_C4_Q59_1120 = 2.5

parametric_const_amp_C4_Q510_1001 = 2.5
parametric_const_amp_C4_Q510_1102 = 2.5
parametric_const_amp_C4_Q510_1120 = 2.5

parametric_const_amp_C4_Q69_1001 = 2.5
parametric_const_amp_C4_Q69_1102 = 2.5
parametric_const_amp_C4_Q69_1120 = 2.5

parametric_const_amp_C4_Q610_1001 = 2.5
parametric_const_amp_C4_Q610_1102 = 2.5
parametric_const_amp_C4_Q610_1120 = 2.5

parametric_const_amp_C4_Q910_1001 = 2.5
parametric_const_amp_C4_Q910_1102 = 2.5
parametric_const_amp_C4_Q910_1120 = 2.5

#C6
parametric_const_amp_C6_Q910_1001 = 2.5
parametric_const_amp_C6_Q910_1102 = 2.5
parametric_const_amp_C6_Q910_1120 = 2.5

parametric_const_amp_C6_Q913_1001 = 2.5
parametric_const_amp_C6_Q913_1102 = 2.5
parametric_const_amp_C6_Q913_1120 = 2.5

parametric_const_amp_C6_Q914_1001 = 2.5
parametric_const_amp_C6_Q914_1102 = 1.8
parametric_const_amp_C6_Q914_1120 = 2.5

parametric_const_amp_C6_Q1013_1001 = 2.5
parametric_const_amp_C6_Q1013_1102 = 2.5
parametric_const_amp_C6_Q1013_1120 = 2.5

parametric_const_amp_C6_Q1014_1001 = 2.5
parametric_const_amp_C6_Q1014_1102 = 2.5
parametric_const_amp_C6_Q1014_1120 = 2.5

parametric_const_amp_C6_Q1314_1001 = 2.5
parametric_const_amp_C6_Q1314_1102 = 2.5
parametric_const_amp_C6_Q1314_1120 = 2.5

#C8
parametric_const_amp_C8_Q1314_1001 = 2.5
parametric_const_amp_C8_Q1314_1102 = 2.5
parametric_const_amp_C8_Q1314_1120 = 2.5

parametric_const_amp_C8_Q1317_1001 = 2.5
parametric_const_amp_C8_Q1317_1102 = 2.5
parametric_const_amp_C8_Q1317_1120 = 2.5

parametric_const_amp_C8_Q1318_1001 = 2.5
parametric_const_amp_C8_Q1318_1102 = 2.5
parametric_const_amp_C8_Q1318_1120 = 2.5

parametric_const_amp_C8_Q1417_1001 = 2.5
parametric_const_amp_C8_Q1417_1102 = 2.5
parametric_const_amp_C8_Q1417_1120 = 2.5

parametric_const_amp_C8_Q1418_1001 = 2.5
parametric_const_amp_C8_Q1418_1102 = 2.5
parametric_const_amp_C8_Q1418_1120 = 2.5

parametric_const_amp_C8_Q1718_1001 = 2.5
parametric_const_amp_C8_Q1718_1102 = 2.5
parametric_const_amp_C8_Q1718_1120 = 2.5

# ---- C3 amplitudes ----
parametric_const_amp_C3_Q34_1001 = 2.5
parametric_const_amp_C3_Q34_1102 = 2.5
parametric_const_amp_C3_Q34_1120 = 2.5

parametric_const_amp_C3_Q38_1001 = 2.5
parametric_const_amp_C3_Q38_1102 = 2.5
parametric_const_amp_C3_Q38_1120 = 2.5

parametric_const_amp_C3_Q37_1001 = 2.5
parametric_const_amp_C3_Q37_1102 = 2.5
parametric_const_amp_C3_Q37_1120 = 2.5

parametric_const_amp_C3_Q48_1001 = 2.5
parametric_const_amp_C3_Q48_1102 = 2.5
parametric_const_amp_C3_Q48_1120 = 2.5

parametric_const_amp_C3_Q47_1001 = 2.5
parametric_const_amp_C3_Q47_1102 = 2.5
parametric_const_amp_C3_Q47_1120 = 2.5

parametric_const_amp_C3_Q78_1001 = 2.5
parametric_const_amp_C3_Q78_1102 = 2.5
parametric_const_amp_C3_Q78_1120 = 2.5

# ---- C5 amplitudes ----
parametric_const_amp_C5_Q78_1001 = 2.5
parametric_const_amp_C5_Q78_1102 = 2.5
parametric_const_amp_C5_Q78_1120 = 2.5

parametric_const_amp_C5_Q712_1001 = 2.5
parametric_const_amp_C5_Q712_1102 = 2.5
parametric_const_amp_C5_Q712_1120 = 2.5

parametric_const_amp_C5_Q711_1001 = 2.5
parametric_const_amp_C5_Q711_1102 = 2.5
parametric_const_amp_C5_Q711_1120 = 2.5

parametric_const_amp_C5_Q812_1001 = 2.5
parametric_const_amp_C5_Q812_1102 = 2.5
parametric_const_amp_C5_Q812_1120 = 2.5

parametric_const_amp_C5_Q811_1001 = 2.5
parametric_const_amp_C5_Q811_1102 = 2.5
parametric_const_amp_C5_Q811_1120 = 2.5

parametric_const_amp_C5_Q1112_1001 = 2.5
parametric_const_amp_C5_Q1112_1102 = 2.5
parametric_const_amp_C5_Q1112_1120 = 2.5

# ---- C7 amplitudes ----
parametric_const_amp_C7_Q1112_1001 = 2.5
parametric_const_amp_C7_Q1112_1102 = 2.5
parametric_const_amp_C7_Q1112_1120 = 2.5

parametric_const_amp_C7_Q1116_1001 = 2.5
parametric_const_amp_C7_Q1116_1102 = 2.5
parametric_const_amp_C7_Q1116_1120 = 2.5

parametric_const_amp_C7_Q1115_1001 = 2.5
parametric_const_amp_C7_Q1115_1102 = 2.5
parametric_const_amp_C7_Q1115_1120 = 2.5

parametric_const_amp_C7_Q1216_1001 = 2.5
parametric_const_amp_C7_Q1216_1102 = 2.5
parametric_const_amp_C7_Q1216_1120 = 2.5

parametric_const_amp_C7_Q1215_1001 = 2.5
parametric_const_amp_C7_Q1215_1102 = 2.5
parametric_const_amp_C7_Q1215_1120 = 2.5

parametric_const_amp_C7_Q1516_1001 = 2.5
parametric_const_amp_C7_Q1516_1102 = 2.5
parametric_const_amp_C7_Q1516_1120 = 2.5

# ---- C10 amplitudes ----
parametric_const_amp_C10_Q1516_1001 = 2.5 
parametric_const_amp_C10_Q1516_1102 = 2.5
parametric_const_amp_C10_Q1516_1120 = 2.5

parametric_const_amp_C10_Q1520_1001 = 2.5
parametric_const_amp_C10_Q1520_1102 = 2.5
parametric_const_amp_C10_Q1520_1120 = 2.5

parametric_const_amp_C10_Q1519_1001 = 2.5
parametric_const_amp_C10_Q1519_1102 = 2.5
parametric_const_amp_C10_Q1519_1120 = 2.5

parametric_const_amp_C10_Q1620_1001 = 2.5
parametric_const_amp_C10_Q1620_1102 = 2.5
parametric_const_amp_C10_Q1620_1120 = 2.5

parametric_const_amp_C10_Q1619_1001 = 2.5
parametric_const_amp_C10_Q1619_1102 = 2.5
parametric_const_amp_C10_Q1619_1120 = 2.5

parametric_const_amp_C10_Q1920_1001 = 2.5
parametric_const_amp_C10_Q1920_1102 = 2.5
parametric_const_amp_C10_Q1920_1120 = 2.5

parametric_const_amp_C2_Q37_1001 = 2.5
parametric_const_amp_C2_Q37_1102 = 2.5
parametric_const_amp_C2_Q37_1120 = 2.5

parametric_const_amp_C2_Q36_1001 = 2.5
parametric_const_amp_C2_Q36_1102 = 2.5 
parametric_const_amp_C2_Q36_1120 = 2.5 

parametric_const_amp_C2_Q67_1001 = 2.5
parametric_const_amp_C2_Q67_1102 = 2.5 
parametric_const_amp_C2_Q67_1120 = 2.5 

parametric_const_amp_C9_Q1519_1001 = 2.5
parametric_const_amp_C9_Q1519_1102 = 2.5
parametric_const_amp_C9_Q1519_1120 = 2.5

parametric_const_amp_C9_Q1415_1001 = 2.5
parametric_const_amp_C9_Q1415_1102 = 2.5
parametric_const_amp_C9_Q1415_1120 = 2.5

parametric_const_amp_C9_Q1419_1001 = 2.5
parametric_const_amp_C9_Q1419_1102 = 2.5
parametric_const_amp_C9_Q1419_1120 = 2.5


#############################################
#            Ringup Coupler Pulse           #
#############################################

rise_len_C12_1102 = 12            
mid_len_C12_1102  = 88       
fall_len_C12_1102 = 12         
amp_flux_C12_1102 = 1.6           
total_len_C12_1102 = rise_len_C12_1102 + mid_len_C12_1102 + fall_len_C12_1102

rise_wf = amp_flux_C12_1102 * (np.sin(np.linspace(-np.pi/2, np.pi/2, rise_len_C12_1102))/2) + amp_flux_C12_1102/2   # 0→amp 
mid_wf  = amp_flux_C12_1102 * np.ones(mid_len_C12_1102)                                  # const amp
fall_wf = amp_flux_C12_1102 * (np.sin(np.linspace(np.pi/2, 3*np.pi/2, fall_len_C12_1102))/2) + amp_flux_C12_1102/2  # amp→0 

rise_up_flux_samples = np.concatenate([rise_wf, mid_wf, fall_wf])

parametric_ringup_amp_C8_Q1317_1102 = 1.6

parametric_ringup_rise_len = 12 
parametric_ringup_mid_len = 88 
parametric_ringup_fall_len = 12  
parametric_ringup_total_len = parametric_ringup_rise_len + parametric_ringup_mid_len + parametric_ringup_fall_len

parametric_ringup_rise_len_1102 = parametric_ringup_rise_len
parametric_ringup_mid_len_1102 =parametric_ringup_mid_len
parametric_ringup_fall_len_1102 = parametric_ringup_fall_len
parametric_ringup_total_len_1102 = parametric_ringup_total_len
parametric_ringup_rise_len_1120 = parametric_ringup_rise_len
parametric_ringup_mid_len_1120 =parametric_ringup_mid_len
parametric_ringup_fall_len_1120 = parametric_ringup_fall_len
parametric_ringup_total_len_1120 = parametric_ringup_total_len
parametric_ringup_rise_len_1001 = parametric_ringup_rise_len
parametric_ringup_mid_len_1001 =parametric_ringup_mid_len
parametric_ringup_fall_len_1001 = parametric_ringup_fall_len
parametric_ringup_total_len_1001 = parametric_ringup_total_len

parametric_ringup_rise_len_C8_Q1317_1102 = parametric_ringup_rise_len_1102
parametric_ringup_mid_len_C8_Q1317_1102 = parametric_ringup_mid_len_1102
parametric_ringup_fall_len_C8_Q1317_1102 = parametric_ringup_fall_len_1102
parametric_ringup_total_len_C8_Q1317_1102 = parametric_ringup_total_len_1102

rise_wf_C8_Q1317_1102 = parametric_ringup_amp_C8_Q1317_1102 * (np.sin(np.linspace(-np.pi/2, np.pi/2, rise_len_C12_1102))/2) + amp_flux_C12_1102/2   
mid_wf_C8_Q1317_1102  = parametric_ringup_amp_C8_Q1317_1102 * np.ones(mid_len_C12_1102)                                  
fall_wf_C8_Q1317_1102 = parametric_ringup_amp_C8_Q1317_1102 * (np.sin(np.linspace(np.pi/2, 3*np.pi/2, fall_len_C12_1102))/2) + amp_flux_C12_1102/2  
ringup_wf_C8_Q1317_1102 = np.concatenate([rise_wf_C8_Q1317_1102, mid_wf_C8_Q1317_1102, fall_wf_C8_Q1317_1102])




PARAMS_BY_PAIR = build_param_index()
GATE_CODES = ("1001", "1102", "1120")

for k, qp in enumerate(machine.qubit_pairs):
    qb_pair   = machine.qubit_pairs[qp]
    machine.qubit_pairs[qp].parametric_drive.opx_output.upsampling_mode = "pulse"
    machine.qubit_pairs[qp].parametric_drive.opx_output.output_mode = "amplified"
    qb_id     = to_pair_label(getattr(qb_pair, "id", qp))  # e.g. "Q12", "Q1012"
    configs   = PARAMS_BY_PAIR.get(qb_id, {})
    if not configs:
        # No parameters defined anywhere for this pair
        continue

    first_coupler = getattr(qb_pair, "controller", None) or getattr(qb_pair, "coupler", None)
    if first_coupler in configs:
        primary_ctrl = first_coupler
    else:
        primary_ctrl = next(iter(configs)) 

    # If a second coupler exists for this pair, treat it as "alt"
    alt_coupler = next((c for c in configs.keys() if c != primary_ctrl), None)
    if alt_coupler:
        machine.qubit_pairs[qp].parametric_drive_alt.opx_output.upsampling_mode = "pulse"
        machine.qubit_pairs[qp].parametric_drive.opx_output.output_mode = "amplified"


    for code in GATE_CODES:
        p = configs.get(primary_ctrl, {}).get(code, {})
        param_const_len = p.get("const_len")
        param_IF        = p.get("IF")
        param_const_amp = p.get("const_amp")
        machine.qubit_pairs[qp].parametric_drive.intermediate_frequency = param_IF
        machine.qubit_pairs[qp].parametric_drive.operations[f"const_{code}"] = SquarePulse(length=param_const_len, amplitude=param_const_amp)

        if alt_coupler:
            pa = configs.get(alt_coupler, {}).get(code, {})
            param_const_len_alt = pa.get("const_len")
            param_IF_alt        = pa.get("IF")
            param_const_amp_alt = pa.get("const_amp")
            machine.qubit_pairs[qp].parametric_drive_alt.intermediate_frequency = param_IF_alt
            machine.qubit_pairs[qp].parametric_drive_alt.operations[f"const_{code}"] = SquarePulse(length=param_const_len, amplitude=param_const_amp)

        else:
            param_const_len_alt = param_IF_alt = param_const_amp_alt = None

        if param_const_len is None or param_IF is None or param_const_amp is None:
            continue

#####################################################################################################################
# %%                                         Save the updated QUAM
########################################################################################################################
# save into state.json
machine.save()
# Visualize the QUA config and save it
pprint(machine.generate_config())
with open("qua_config.json", "w+") as f:
    json.dump(machine.generate_config(), f, indent=4)
